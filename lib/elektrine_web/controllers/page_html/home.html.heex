<%= if !@current_user do %>
<.flash_group flash={@flash} />
<% end %>

<div class="digital-container min-h-screen bg-gray-900 text-cyan-400 flex flex-col items-center justify-center relative overflow-hidden">
  <!-- Generative Art Canvas -->
  <canvas id="generative-canvas" class="absolute inset-0 w-full h-full"></canvas>
  
  <div class="digital-frame border border-cyan-500/30 p-6 md:p-10 max-w-3xl w-full mx-auto bg-gray-900/70 backdrop-blur-sm z-10 relative">
    <!-- Central Mark/Logo -->
    <div class="flex justify-center mb-8 relative z-10">
      <div class="relative">
        <div class="absolute -inset-2 opacity-8 blur-sm bg-gradient-radial from-cyan-500/10 to-transparent"></div>
        <img src="/images/mark.png" alt="Elektrine Mark" class="h-12 w-auto object-contain z-10 opacity-30" style="filter: invert(1) sepia(0.5) saturate(1.5) hue-rotate(180deg) brightness(0.7) contrast(0.8);" />
      </div>
    </div>
    
    <h1 class="text-5xl font-bold mb-6 relative digital-text z-10" style="background: linear-gradient(45deg, #22d3ee 30%, #ffa500 50%, #22d3ee 70%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;">
      ELEKTRINE
    </h1>
    
    <div class="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-8 relative z-10">
      <div class="digital-box border border-cyan-500/40 p-4 hover:bg-cyan-900/20 transition-all">
        <h3 class="text-lg mb-2 text-cyan-300">EMAIL</h3>
        <p class="text-sm opacity-70">Send and receive email with a modern interface.</p>
      </div>
      
      <div class="digital-box border border-cyan-500/40 p-4 hover:bg-cyan-900/20 transition-all">
        <h3 class="text-lg mb-2 text-cyan-300">MESSAGING</h3>
        <p class="text-sm opacity-70">Direct communication with other platform users.</p>
      </div>
      
      <div class="digital-box border border-cyan-500/40 p-4 hover:bg-cyan-900/20 transition-all">
        <h3 class="text-lg mb-2 text-cyan-300">PROFILE</h3>
        <p class="text-sm opacity-70">Manage your account and personal settings.</p>
      </div>
    </div>
    
    <div class="flex flex-col sm:flex-row justify-center gap-4 mt-8 relative z-10">
      <%= if @current_user do %>
        <.link href={~p"/email"} class="btn bg-transparent border-cyan-500/70 text-cyan-400 hover:bg-cyan-900/30">
          <span class="font-mono">ACCESS EMAIL</span>
        </.link>
        <.link href={~p"/account"} class="btn bg-transparent border-cyan-500/70 text-cyan-400 hover:bg-cyan-900/30">
          <span class="font-mono">MY PROFILE</span>
        </.link>
        <.link href={~p"/logout"} method="delete" class="btn bg-transparent border-cyan-500/70 text-cyan-400 hover:bg-cyan-900/30">
          <span class="font-mono">SIGN OUT</span>
        </.link>
      <% else %>
        <.link href={~p"/login"} class="btn bg-transparent border-cyan-500/70 text-cyan-400 hover:bg-cyan-900/30">
          <span class="font-mono">SIGN IN</span>
        </.link>
        <.link href={~p"/register"} class="btn bg-transparent border-cyan-500/70 text-cyan-400 hover:bg-cyan-900/30">
          <span class="font-mono">CREATE ACCOUNT</span>
        </.link>
        <.link href={~p"/temp-mail"} class="btn bg-transparent border-cyan-500/70 text-cyan-400 hover:bg-cyan-900/30">
          <span class="font-mono">TEMP MAIL</span>
        </.link>
      <% end %>
    </div>
  </div>
  
  <div class="network-grid absolute inset-0 opacity-10 pointer-events-none">
    <!-- Generated by script -->
  </div>
</div>

<script>
  // Initialize generative art on page load
  document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('generative-canvas');
    const ctx = canvas.getContext('2d');
    
    // Set canvas dimensions
    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    
    // Initial sizing
    resizeCanvas();
    
    // Handle window resize
    window.addEventListener('resize', resizeCanvas);
    
    // Node points for network visualization
    const nodes = [];
    const nodeCount = 50;
    const connectionDistance = 150;
    
    // Create nodes
    for (let i = 0; i < nodeCount; i++) {
      nodes.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        size: Math.random() * 2 + 1,
        speedX: (Math.random() - 0.5) * 0.3,
        speedY: (Math.random() - 0.5) * 0.3
      });
    }
    
    // Animation loop
    function draw() {
      // Clear canvas with semi-transparent background for trail effect
      ctx.fillStyle = 'rgba(15, 23, 42, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      // Update and draw nodes
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        
        // Move nodes
        node.x += node.speedX;
        node.y += node.speedY;
        
        // Bounce off boundaries
        if (node.x < 0 || node.x > canvas.width) node.speedX *= -1;
        if (node.y < 0 || node.y > canvas.height) node.speedY *= -1;
        
        // Draw node with warm/cool color variation
        const colorChoice = Math.sin(Date.now() * 0.001 + i) > 0.7;
        ctx.beginPath();
        ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);
        ctx.fillStyle = colorChoice ? 'rgba(255, 165, 0, 0.4)' : 'rgba(34, 211, 238, 0.6)';
        ctx.fill();
        
        // Draw connections between nodes
        for (let j = i + 1; j < nodes.length; j++) {
          const otherNode = nodes[j];
          const dx = otherNode.x - node.x;
          const dy = otherNode.y - node.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < connectionDistance) {
            // Opacity based on distance
            const opacity = 1 - (distance / connectionDistance);
            ctx.beginPath();
            ctx.moveTo(node.x, node.y);
            ctx.lineTo(otherNode.x, otherNode.y);
            const connectionColor = Math.sin(Date.now() * 0.0005 + i + j) > 0.8 ? 
              `rgba(255, 69, 0, ${opacity * 0.15})` : 
              `rgba(34, 211, 238, ${opacity * 0.2})`;
            ctx.strokeStyle = connectionColor;
            ctx.lineWidth = 0.5;
            ctx.stroke();
          }
        }
      }
      
      requestAnimationFrame(draw);
    }
    
    // Start animation
    draw();
    
    // Add subtle pulse effect to main title
    const title = document.querySelector('.digital-text');
    let pulseIntensity = 0;
    let increasing = true;
    
    setInterval(() => {
      if (increasing) {
        pulseIntensity += 0.05;
        if (pulseIntensity >= 1) increasing = false;
      } else {
        pulseIntensity -= 0.05;
        if (pulseIntensity <= 0) increasing = true;
      }
      
      title.style.textShadow = `0 0 ${5 + pulseIntensity * 8}px rgba(34, 211, 238, ${0.5 + pulseIntensity * 0.3}), 0 0 ${3 + pulseIntensity * 6}px rgba(255, 165, 0, ${0.3 + pulseIntensity * 0.2})`;
    }, 50);
    
    // Cursor blink effect
    const cursor = document.querySelector('.cursor-blink');
    setInterval(() => {
      cursor.style.opacity = cursor.style.opacity === '0' ? '1' : '0';
    }, 500);
  });
</script>